{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","Jumbotron","fluid","className","Footer","href","marked","setOptions","breaks","renderer","Renderer","link","title","text","App","props","state","markdown","placeholder","handleChange","bind","e","this","setState","target","value","onChange","React","Component","Toolbar","onClick","icon","Editor","id","type","Previewer","dangerouslySetInnerHTML","__html","rootElement","document","getElementById","ReactDOM","render","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6VAIaA,EAAS,kBAClB,kBAACC,EAAA,EAAD,CAAWC,OAAK,EAACC,UAAU,aACvB,wBAAIA,UAAU,4BAAd,sBACA,+BCFKC,G,MAAS,kBACb,4BAAQD,UAAU,UAChB,uBAAGA,UAAU,eAAb,gCACgC,IAC9B,uBAAGE,KAAK,mCACL,IACD,oDAJJ,qDCGXC,IAAOC,WAAW,CAChBC,QAAQ,IAGV,IAAMC,EAAW,IAAIH,IAAOI,SAC5BD,EAASE,KAAO,SAAUN,EAAMO,EAAOC,GAErC,MAAO,mCAA4BR,EAA5B,aAAqCQ,GAAS,Q,IAEjDC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAUC,GAEZ,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBALH,E,yDAONC,GACXC,KAAKC,SAAS,CACZN,SAAUI,EAAEG,OAAOC,U,+BAKrB,OACE,6BACE,kBAAC,EAAD,MACA,yBAAKtB,UAAU,WACb,yBAAKA,UAAU,cAEb,kBAAC,EAAD,CAASU,KAAK,WACd,kBAAC,EAAD,CAAQI,SAAUK,KAAKN,MAAMC,SAAUS,SAAUJ,KAAKH,gBAExD,yBAAKhB,UAAU,cACf,yBAAKA,UAAU,eAEb,kBAAC,EAAD,CAASU,KAAK,cACd,kBAAC,EAAD,CAAWI,SAAUK,KAAKN,MAAMC,aAGpC,kBAAC,EAAD,W,GA/BUU,IAAMC,WAqClBC,EAAU,SAACd,GACf,OACE,yBAAKZ,UAAU,WACb,uBAAGS,MAAM,YAAYT,UAAU,yBAC9BY,EAAMF,KACP,uBAAGiB,QAASf,EAAMe,QAAS3B,UAAWY,EAAMgB,SAK5CC,EAAS,SAACjB,GACd,OACE,8BAAUkB,GAAG,SAASR,MAAOV,EAAME,SAAUS,SAAUX,EAAMW,SAAUQ,KAAK,UAI1EC,EAAY,SAACpB,GACjB,OACE,yBAAKkB,GAAG,UAAUG,wBAAyB,CAAEC,OAAQ/B,IAAOS,EAAME,SAAU,CAACR,SAAUA,QAKrFS,EAAW,isCAkDFJ,IACTwB,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,kBAAC,EAAD,MAASJ,GCvHLK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNN,IAASC,OACP,kBAAC,IAAMM,WAAP,KACE,kBAAC,EAAD,OAEFT,SAASC,eAAe,SDyHpB,kBAAmBS,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.53b3b1ab.chunk.js","sourcesContent":["import React from 'react';\nimport './styles/Header.css';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\n\nexport const Header = () => (\n    <Jumbotron fluid className=\"jumbotron\">\n        <h1 className=\"header-title text-center\">Markdown Previewer</h1>\n        <hr />\n     </Jumbotron>\n    );\n\n","import React from 'react';\nimport './styles/Footer.css';\n\n\n\nexport const Footer = () => (\n         <footer className=\"footer\">\n           <p className=\"text-center\">\n             Markdown Previewer created by{\" \"}\n             <a href=\"https://github.com/TLanetteRose\">\n               {\" \"}\n               <span>T.Lanette Pollard</span>\n             </a>\n            &nbsp; FreeCodeCamp Front End Libraries Project </p>\n         </footer>\n       );","import React from 'react';\nimport ReactDOM from \"react-dom\";\nimport marked from 'marked';\nimport './App.css';\nimport './index.css';\n\nimport {Header} from '../src/components/Header';\nimport {Footer} from '../src/components/Footer';\n\n//Allows line breaks with the return button\nmarked.setOptions({\n  breaks: true\n});\n\nconst renderer = new marked.Renderer();\nrenderer.link = function (href, title, text) {\n  // eslint-disable-next-line\n  return `<a target=\"_blank\" href=\"${href}\">${text}` + '</a>';\n}\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      markdown: placeholder\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(e){\n    this.setState({\n      markdown: e.target.value\n    });\n  }\n  render() {\n    //const classes = this.state.editorMaximized ? ['editorWrap maximized', 'previewWrap hide', 'fa fa-compress'] : this.state.previewMaximized ? ['editorWrap hide', 'previewWrap maximized','fa fa-compress'] : ['editorWrap', 'previewWrap', 'fa fa-arrows-alt'];\n    return (\n      <div>\n        <Header />\n        <div className=\"appWrap\">\n          <div className=\"editorWrap\"\n          >\n            <Toolbar text=\"Editor\" />\n            <Editor markdown={this.state.markdown} onChange={this.handleChange} />\n          </div>\n          <div className=\"converter\"></div>\n          <div className=\"previewWrap\"\n          >\n            <Toolbar text=\"Previewer\" />\n            <Previewer markdown={this.state.markdown} />\n          </div>\n        </div>\n        <Footer />\n      </div>\n    )\n  }\n};\n\nconst Toolbar = (props) => {\n  return (\n    <div className=\"toolbar\">\n      <i title=\"rebel-cow\" className=\"fa fa-free-code-camp\"/>\n      {props.text}\n      <i onClick={props.onClick} className={props.icon}></i>\n    </div>\n  );\n};\n\nconst Editor = (props) => {\n  return (\n    <textarea id=\"editor\" value={props.markdown} onChange={props.onChange} type=\"text\" />\n  );\n};\n\nconst Previewer = (props) => {\n  return (\n    <div id=\"preview\" dangerouslySetInnerHTML={{ __html: marked(props.markdown, {renderer: renderer })}} />\n  );\n};\n\n\nconst placeholder = `\n# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n  \nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n  \nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | ------------- \nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n  - And of course there are lists.\n    - Some are bulleted.\n      - With different indentation levels.\n          - That look like this.\n\n\n  1. And there are numbererd lists too.\n  1. Use just 1s if you want! \n  1. But the list goes on...\n  - Even if you use dashes or asterisks.\n  * And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)`;\n\n\n\nexport default App;\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}